apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'


sourceCompatibility = 1.8
version = '1.0'



mainClassName = 'porto.barrier.Main'

repositories {
    mavenCentral()
}


dependencies {
// command line argument parsing
// https://mvnrepository.com/artifact/commons-cli/commons-cli
//    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'

//coordinator client interface
// https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper
    compile group: 'org.apache.curator', name: 'curator-framework', version: '4.0.0'
    compile group: 'org.apache.curator', name: 'curator-recipes', version: '4.0.0'

//logging
// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
// https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'

//tests
// https://mvnrepository.com/artifact/junit/junit
//    testCompile group: 'junit', name: 'junit', version: '4.4'
// https://mvnrepository.com/artifact/org.assertj/assertj-core
//    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.8.0'

}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'porto.barrier.Main',
                'Implementation-Title': 'Barrier example',
                'Implementation-Version': version
        )
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    //with jar

}

sourceSets {
    main {
        java {
            // include self written and generated code
            srcDirs 'src/main/java'
        }
    }
    // in future add test configuration here
}


//delete generated source code when clean
clean {
    delete "build"
}


